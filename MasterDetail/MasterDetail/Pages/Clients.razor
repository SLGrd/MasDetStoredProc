@page "/CreateInvoice"
@using Common;
@using Common.Data
@using Common.Models;
@using System.Reflection
@using System.Text;
@using Sj =  System.Text.Json;
@using System.ComponentModel.DataAnnotations; 
@using Newtonsoft.Json;
@using Cg = System.Configuration.ConfigurationManager;

@inject IHttpClientFactory _clientFactory;

<!--  Browser tab title  -->
<PageTitle>Show Master & Detail</PageTitle>

 <!-- Greeting Message -->
 <TopBanner BannerTxt="Build and Show Model"></TopBanner> 

<div class="container h80 CenterCol">   
    <!-- Buttons line -->
    <div class="row estilo " style="border:none">
        <div class="col-11 StartRow m-0" style="gap:1px">  
            <div class="btn-group-sm">
            <button type="button" class="btn tn-labeled btn-primary  " @onclick="AddNewInvoice"     > Insert New Invoice   </button>           
            <button type="button" class="btn tn-labeled btn-primary  " @onclick="ValidateInvoice"   > Validate Invoice     </button>
            <button type="button" class="btn tn-labeled btn-primary  " @onclick="EditionMode"       > Edit Current Invoice </button>
            <button type="button" class="btn tn-labeled btn-primary  " @onclick="TestConnection"    > Test API Connection  </button>
            <button type="button" class="btn tn-labeled btn-primary  " @onclick="GetInvoiceById"    > Get Invoice by ID    </button>            
            </div>
        </div>

        <div class="col-1">
            <input type="number" style="width:90%;text-align:center;" @bind="@iNumber" />
        </div>
    </div>
    <!-- Title  -->
    <div class="row estilo round-border" style="background-image:linear-gradient(to bottom right, #003300 40%, #005b00 60% );">
        <div class="col-8 InvBanner StartRow m-0" >
            <h3>Importadora South Winds - Invoice</h3>
        </div>
        <div class="col-2 flexCol m-0">
            <label>Number</label>
            <input type="number" disabled style="width:90%;text-align:center;" @bind="Inv.Header!.InvoiceNumber" />                
        </div>
        <div class="col-2 flexCol m-0">
            <label>Date</label>
            <input type="date"  disabled=@NoEdit style="width:96%;" @bind="Inv.Header.InvoiceDate" /> 
        </div>
    </div>
    <!-- Header -->    
    <div class="row estilo p-2" style="border-style:solid;border-top:none;">              
        <div class="col-8 flexCol" >
            <label>Cliente</label>
            <input type="text"  disabled=@NoEdit style="width:98%" @bind="Inv.Header.Buyer" />                
        </div>
        <div class="col-2 flexCol">
            <label>CPF </label>
            <input type="Text"  disabled=@NoEdit style="width:98%" @bind="Inv.Header.Cpf" />               
        </div>
            <di class="col-2 flexCol">
            <label>Phone</label>
            <input type="Text"  disabled=@NoEdit style="width:98%" @bind="Inv.Header.Phone" />                
        </di>
        <div class="col-8 flexCol">
            <label>Address</label>
            <input type="Text"  disabled=@NoEdit style="width:98%" @bind="Inv.Header.Address" />                
        </div>
        <div class="col-2 flexCol">
            <label>Complemento</label>
            <input type="Text"  disabled=@NoEdit style="width:98%" @bind="Inv.Header.Complto"/>                
        </div>
        <div class="col-2 CenterRow">   
            <i class="fas fa-undo-alt  fa-2x" style="color:blue" hidden=@NoEdit @onclick="UndoInvoiceChanges" /> 
            <i class="far fa-trash-alt fa-2x" style="color:red"  hidden=@NoEdit data-bs-toggle="modal" data-bs-target="#myModal" />                                                
        </div>     
    </div>        
    <!-- Show edition pad -->
    @if (wrkLine is not null)
    {           
        <div class="row estilo fadeBorder @fade m-0 p-0" style="">                   
            <div class="col-1 flexCol" style="padding-left:6px;">
                <label>Item</label>
                <input type="number" style="width:100%;text-align:center;" @bind=@wrkLine.ItemNumber />            
            </div>
            <div class="col-4 flexCol">
                <label>Description</label>
                <input type="Text" style="width:100%;text-align:left;"    @bind=@wrkLine.Description />               
            </div>
            <div class="col-1 flexCol">  
                <label>Qtty</label>
                <input type="number" style="width:100%;text-align:right;"   @bind=@wrkLine.Qtty /> 
            </div>
            <div class="col-2 flexCol">
                <label>Unit Price</label>
                <input type="number" name="number" pattern="([0-9]{1,1}).([0-9]{2})" style="width:100%;text-align:right;"  @bind=@wrkLine.UnitPrice />                
            </div>
            <div class="col-2 flexCol">
                <label>Unit Price</label>
                <input type="Text" style="width:100%;text-align:right;"   value=@((wrkLine.UnitPrice * wrkLine.Qtty).ToString("N2")) />                
            </div>
            <div class="col-2 CenterRow justify-content-between mt-3">                    
                <!-- Line new, Update and Delete buttons -->
                <img src="Icons/file_32px.png"                @onclick="@(()=> AddNewLine())"         />   
                <img src="Icons/undo_32px.png"                @onclick="@(()=> UndoLine())"           /> 
                <img src="Icons/downloading_updates_26px.png" @onclick="@(()=> UpdateLine( wrkLine))" />
                <img src="Icons/trash_can_32px.png"           @onclick="@(()=> DeleteLine())"         />             
            </div> 
        </div>         
    } 
    <!-- Move records to table-->
    <div class="row estilo m-0 p-0" style="background-color:whitesmoke;border-style:solid;border-top:none;" >
        <div class="col-12 mt-2 flexCol p-2">
            <table class="table table-bordered table-secondary" >
                <thead>
                    <tr>
                        <th style="text-align:center">Item</th>
                        <th style="text-align:center">Description</th>
                        <th style="text-align:center">Qtty</th>
                        <th style="text-align:center">Unit Price</th>
                        <th style="text-align:center">Total</th>
                        <th style="text-align:center">Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (InvoiceLine L in Inv.Lines!)
                    {
                        <tr>
                            <td style="text-align:right">@L.ItemNumber</td>
                            <td style="text-align:left" >@L.Description</td>
                            <td style="text-align:right">@L.Qtty.ToString("N0")</td>
                            <td style="text-align:right">@L.UnitPrice.ToString("N2")</td>
                            <td style="text-align:right">@((L.Qtty * L.UnitPrice).ToString("N2"))</td>
                            <td style="text-align:center;color:lightyellow"> 
                                <!-- Copies line to Update pad -->
                                <img src="Icons/maintenance_32px.png" hidden=@NoEdit @onclick="@(()=> Copy2Pad( L))" />
                            </td>
                        </tr>
                    }               
                </tbody>
            </table>
        </div>
        <div class="col-12 CenterRow pb-2 pt-2">                
            @if ( !@InvalidInvoice)
            {
                @if (Inserting)
                {
                    <button type="button" class="btn btn-labeled btn-danger btn-sm" disabled=@InvalidInvoice @onclick="SaveInvoice" > Insert New Invoice   </button>
                }
                @if (Updating)
                {
                    <button type="button" class="btn btn-labeled btn-danger btn-sm" disabled=@InvalidInvoice @onclick="UpdateInvoice" > Update Invoice   </button>
                }
            }                         
        </div>
    </div>
    <!-- Validation Messages -->
    <div class="col-12 StartCol" style="font-size:19px; color:indianred">
        <label>Error Messages</label>
        <textarea style="width:100%" rows=@nMsgRows >
            @ValidationMsg
        </textarea>
    </div>
</div>

<!-- Modal -->
<div class="modal fade" id="myModal" role="dialog"> <!-- Veja o video https://www.youtube.com/watch?v=IGzDf3dSSAQ&t=647s -->
    <div class="modal-dialog">    
        <!-- Modal content-->
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title">Master / Detail</h4>
                <button type="button" class="close" data-bs-dismiss="modal">&times;</button>          
            </div>
            <div class="modal-body">
                <p>Confirma exclusão do pedido ?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-labeled btn-danger"  data-bs-dismiss="modal" @onclick="DeleteInvoice">Confirm DELETE</button>
                <button type="button" class="btn btn-labeled alert-light" data-bs-dismiss="modal">Cancel</button>
            </div>
        </div>      
    </div>
</div>

<style>
    .h20 { height: 20%; }
    .h30 { height: 30%; }
    .h60 { height: 60%; }
    .h70 { height: 70%; }
    .h80 { height: 80%; }
    .h90 { height: 90%; }
    .h100 { height: 100%; }
    h2 {         
        font-family : 'Montserrat';
        font-size: 2em;
    }
    h3 {         
        font-family : 'Montserrat';
        font-size: 1.5em;
    }
    .estilo{   
        width: 100%;
        border-width:   2px;
        border-style:   solid;
        border-top:     none;
        border-color:   green;
        padding-bottom: 6px;             
    }
    .fadeBorder{        
        border-left:    solid 2px green;
        border-right:   solid 2px green;
        border-bottom:  none;
        border-top:     none;
        background-color:   yellowgreen;        
    }
    .fadein{        
        height:              0px;
        transition:          height;
        transition-delay :   200ms;
        transition-duration: 1200ms;     
        border-bottom:       none;
    }
    .fadeout{
        height:              68px;
        transition:          height;
        transition-delay :   200ms;
        transition-duration: 1800ms;    
        border-bottom:       solid 1px red;
    }        
    .round-border{
        border: solid 1px  green;
        border-top-left-radius:10px;
        border-top-right-radius:10px;
    }
    .StartRow{
        display:         flex;
        flex-direction:  row;
        align-items:     center;
        justify-content: start ;
    }
    .StartCol{
        display:         flex;
        flex-direction:  column;
        align-items:     start;
        justify-content: center;
    }
    .CenterCol{
        display:         flex;
        flex-direction:  column;
        align-items:     center;
        justify-content: center;
    }
    .CenterRow{
        display:         flex;
        flex-direction:  row;
        align-items:     center;
        justify-content: space-around;
    }
    .InvBanner{        
        height: 60px;        
        color:  white;
        padding-top:   15px;
        padding-left:  27px;
    }
    .flexCol{          
        display:         flex;
        flex-direction:  column;
        margin:          0;
        padding:         0;
        align-items:     start;
        justify-content: center;
        color:           black;
    }
    label{
        font-size: 12px;
        color : red;
        margin: 0px;
    }
    table tbody tr:hover{
        color:red;
    }
</style>

@code{
    //  Populates model with hard coded sample data
    public Invoice Inv { get; set; } = new(new InvoiceHeader(), new List<InvoiceLine>());

    private InvoiceLine? wrkLine;
    private InvoiceLine? CurrentListLine ;

    private int iNumber = 0;

    private bool   NoEdit = true;
    private string fade   = "fadein";
    private bool InvalidInvoice = true;
    private bool Inserting = false;
    private bool Updating = false;


    private string ValidationMsg = "";

    private int nMsgRows = 0;

    protected override void OnInitialized( )
    {
        //Inv = SampleData.CreateInvoice();
        Inv = new(new InvoiceHeader(), new List<InvoiceLine>());  
        wrkLine   = new( new Guid());
        base.OnInitialized();
    }

    private void ClearForm()
    {
        Inv = new Invoice(new InvoiceHeader(), new List<InvoiceLine>());
    }

    private void ResetVariables()
    {
        InvalidInvoice = true; ValidationMsg = ""; nMsgRows = 0;       
    }
    private void SetNoEdit()
    {        
        NoEdit = true; fade = "fadein";
    }

    private async void TestConnection()
    {
        var h = _clientFactory.CreateClient();      
        h.BaseAddress = new Uri( Cg.AppSettings["ApiBaseAddress"]! );

        using HttpResponseMessage m = await h.GetAsync("/TestConnection");
        if (m.IsSuccessStatusCode)
            ValidationMsg = m.Content.ReadAsStringAsync().Result.ToString();
        else
            ValidationMsg = $"{m.StatusCode} - {m.ReasonPhrase}";
        this.StateHasChanged();
    }

    private void AddNewInvoice()
    {
        //  Get a clean invoice model and a clean working line
        Inv = new(new InvoiceHeader(), new List<InvoiceLine>());         
        wrkLine   = new( new Guid());
        //  Reset variables
        NoEdit = false; fade = "fadeout";
        ResetVariables();
    }
    private void EditionMode()
    {
        //  Get a clean working line
        wrkLine   = new( new Guid());
        //  Toggle control variables
        NoEdit = !NoEdit; fade = (NoEdit ? "fadein" : "fadeout");
        ResetVariables();  
    }
    private async void SaveInvoice()
    {        
        try
        {
            var h = _clientFactory.CreateClient();
            h.BaseAddress = new Uri( Cg.AppSettings["ApiBaseAddress"]! );

            string json = Sj.JsonSerializer.Serialize<Invoice>(Inv, new Sj.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            var data = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

            using HttpResponseMessage m = await h.PostAsync($"/CreateRecord", data);
            m.EnsureSuccessStatusCode();
            if (m.IsSuccessStatusCode)
            {      
                var w = await m.Content.ReadAsStringAsync();
                Inv = Newtonsoft.Json.JsonConvert.DeserializeObject<Invoice>( w)!;
                ValidationMsg = $"Record created : {DateTime.Now:hh:mm:ss}";
                // Reset invalid flag
                InvalidInvoice = true;
            }
        }
        catch (Exception ex) { ValidationMsg = "Error : Creating record => " + ex.Message; }        
        this.StateHasChanged();
    }
    private async void UpdateInvoice()
    {
        try
        {
            var h = _clientFactory.CreateClient();
            h.BaseAddress = new Uri( Cg.AppSettings["ApiBaseAddress"]! );

            string json = Sj.JsonSerializer.Serialize<Invoice>(Inv, new Sj.JsonSerializerOptions { PropertyNameCaseInsensitive = true });
            var data = new StringContent(json, System.Text.Encoding.UTF8, "application/json");

            using HttpResponseMessage m = await h.PutAsync($"/UpdateRecord", data);
            m.EnsureSuccessStatusCode();
            if (m.IsSuccessStatusCode)
            {      
                var w = await m.Content.ReadAsStringAsync();
                Inv = Newtonsoft.Json.JsonConvert.DeserializeObject<Invoice>( w)!;
                ValidationMsg = $"Record updated : {DateTime.Now:hh:mm:ss}";
                // Reset invalid flag
                InvalidInvoice = true;
            }
        }
        catch (Exception ex) { ValidationMsg = "Error : Creating record => " + ex.Message; }        
        this.StateHasChanged();
    }
    private async void GetInvoiceById()
    {
        try
        {
            var h = _clientFactory.CreateClient();
            h.BaseAddress = new Uri(Cg.AppSettings["ApiBaseAddress"]!);

            //  Envia o request (getasync) com o URI universal resource identifier
            using HttpResponseMessage m = await h.GetAsync($"/GetRecordById/{iNumber}");
            // Se o codigo não indicar sucesso, este comand gera uuma Exception
            m.EnsureSuccessStatusCode();    
            //  Success code OK            
            var dados = await m.Content.ReadAsStringAsync();
            //  Dois jeitos de converter o Json numa lista
            Inv = Sj.JsonSerializer.Deserialize<Invoice>(dados, new Sj.JsonSerializerOptions
                                                                { PropertyNameCaseInsensitive = true })!;
            ValidationMsg = $"Record {iNumber} :  {DateTime.Now:hh:mm:ss}";
        }
        catch (Exception ex) 
        {
            ClearForm();
            ValidationMsg = $"Error : Record {iNumber} not found => " + ex.Message; 
        }
        SetNoEdit();
        this.StateHasChanged();
    }

    private async void DeleteInvoice()
    {
        try
        {
            var h = _clientFactory.CreateClient();
            h.BaseAddress = new Uri( Cg.AppSettings["ApiBaseAddress"]! );

            using HttpResponseMessage m = await h.DeleteAsync( $"/DeleteRecord/{Inv.Header?.InvoiceNumber}");
            m.EnsureSuccessStatusCode();
            //  Success code OK
            Inv = new(new InvoiceHeader(), new List<InvoiceLine>());   
            ValidationMsg = m.Content.ReadAsStringAsync().Result.ToString();                            
        }
        catch (Exception ex) { ValidationMsg = "Error : Testing Invoice Model=> " + ex.Message; }
        //  Set control variables 
        InvalidInvoice = true;  NoEdit = true; fade = "fadein";       
        this.StateHasChanged();
    }

    private void Copy2Pad(InvoiceLine L)
    {
        SaveLine( L, wrkLine!);
        CurrentListLine = L;
    }
    private void AddNewLine()
    {
        wrkLine = new( Inv.Header!.Gid);  
        CurrentListLine = new( Inv.Header!.Gid); 
        Inv.Lines!.Add( CurrentListLine);
    }

    private void UndoLine() =>  SaveLine( CurrentListLine!, wrkLine!);                   
    private void UpdateLine( InvoiceLine wrk) =>  SaveLine( wrk, CurrentListLine!);
    //private void ConfirmDelete();
    private void DeleteLine() => Inv.Lines!.Remove( CurrentListLine!);  
    private void UndoInvoiceChanges() => new Invoice(new InvoiceHeader(), new List<InvoiceLine>());   
   
    private void SaveLine( InvoiceLine a, InvoiceLine b)
    {
        foreach( var p in a!.GetType().GetProperties())
        {
            PropertyInfo q = b!.GetType().GetProperty( p.Name)!;
            q.SetValue( b, p.GetValue( a, null), null);
        }  
    }
    private void SaveClassA2B( Invoice A, Invoice B)
    {
        foreach( var p in A.Header!.GetType().GetProperties())
        {
            PropertyInfo q = B.Header!.GetType().GetProperty( p.Name)!;
            q.SetValue( B.Header, p.GetValue( A.Header, null), null);
        }

        B.Lines!.Clear();
        foreach( var line in A.Lines!)
        {
            InvoiceLine l = new( new Guid());
            foreach( var p in line.GetType().GetProperties())
            {
                PropertyInfo q = l!.GetType().GetProperty(p.Name)!;
                q.SetValue( l, p!.GetValue( line, null), null);
            }
            B.Lines.Add(l);
        }
        B = new Invoice( B.Header!, B.Lines);
    }
    private void ValidateInvoice()
    {              
        try
        {
            InvalidInvoice = true;
            bool NoErrorsDetected = true;
            nMsgRows = 0;
            //  Clear validation message
            ValidationMsg = "";
            //  Set context for model validation - Header
            var context = new ValidationContext( Inv.Header!, serviceProvider: null, items: null);
            var validationResults = new List<ValidationResult>();
            bool isValid = Validator.TryValidateObject( Inv.Header!, context, validationResults, true);  

            // Get validation Results
            if (validationResults.Count == 0)
            {
                nMsgRows++;
                ValidationMsg += "Header => No errors detected" + "\r";
            }
            else
                for (int i = 0; i < validationResults.Count; i++)
                {   nMsgRows++;
                    ValidationMsg += "Header => " + validationResults.ElementAt(i) + "\r";
                    NoErrorsDetected = false;
                }

            //  Check for empty lines list
            if ( Inv.Lines.Count == 0)
            { 
                ValidationMsg += $"Line {0} => No lines detected." + "\r";
                NoErrorsDetected = false;
            }

            // Set context for model validation - every Line
            for (int n = 0; n < Inv.Lines!.Count; n++)
            {
                context = new ValidationContext( Inv.Lines[n], serviceProvider: null, items: null);
                validationResults = new List<ValidationResult>();
                isValid = Validator.TryValidateObject( Inv.Lines[n]!, context, validationResults, true);

                if (validationResults.Count == 0)
                {
                    nMsgRows++;
                    ValidationMsg += $"Line {n} => No errors detected" + "\r";
                }
                else
                    for (int i = 0; i < validationResults.Count; i++)
                    {
                        nMsgRows++;
                        ValidationMsg += $"Line {n} => " + validationResults.ElementAt(i) + "\r";
                        NoErrorsDetected = false;
                    }                        
            }

            if ( NoErrorsDetected)
            {
                InvalidInvoice =false;

                if ( Inv.Header.InvoiceNumber == 0)
                {
                    Inserting =true; Updating = false;
                }
                else
                {
                    Inserting =false; Updating = true;   
                }
                SetNoEdit();
            }
        }
        catch (Exception ex)
        {
            nMsgRows = 0;
            ValidationMsg = "Error : Testing Invoice Model=> " + ex.Message;
        }        
    }
}