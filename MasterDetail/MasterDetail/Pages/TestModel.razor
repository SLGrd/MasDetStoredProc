@page "/testModel"

@using System.ComponentModel.DataAnnotations; 
@using Newtonsoft.Json;
@using Common.Models;
@using Common.Data;
@using static Common.Glb;
@using Cg = System.Configuration.ConfigurationManager;
@inject IHttpClientFactory _clientFactory;

<PageTitle><span><img src="~/Navicon.svg" /></span>  Counter Validation $ Serialization</PageTitle>

<TopBanner BannerTxt="Validation and Serialization"></TopBanner>

<div class="text-center mt-4 mb-0">
    <button class="btn btn-primary" style="width:320px"                 @onclick="ValidateAndSerialize" > Validate </button>
</div>

<div class="d-flex flex-row justify-content-between m-5 p-0 mt-3">
    <div class="d-flex flex-column align-items-center" style="font-size:19px; color:indianred">
        <label >Unformatted JSON</label>
        <textarea id="w3review1" name="w3review" rows="24" cols="50">
            @JsonText
        </textarea>
    </div>
    <div class="d-flex flex-column align-items-center" style="font-size:19px; color:indianred">
        <label>Formatted JSON</label>
        <textarea id="w3review2" name="w3review" rows="24" cols="50">
            @JsonTextFmt
        </textarea>
    </div>
    <div class="d-flex flex-column align-items-center" style="font-size:19px; color:indianred">
         <label>Error Messages</label>
        <textarea id="w3review3" name="w3review" rows="24" cols="50">
            @ValidationMsg
        </textarea>
    </div>
</div>

@code {   
    private string? JsonText;
    private string? JsonTextFmt;
    private string? ValidationMsg;

    Invoice? invoice; 

    private void ValidateAndSerialize()
    {
        try
        {
            //  Get sample data
            invoice = SampleData.CreateInvoice();

            //  Clear validation message
            ValidationMsg = "";
            //  Set context for model validation - Header
            var context = new ValidationContext(invoice.Header!, serviceProvider: null, items: null);
            var validationResults = new List<ValidationResult>();
            bool isValid = Validator.TryValidateObject(invoice.Header!, context, validationResults, true);

            // Get validation Results
            if (validationResults.Count == 0)
                ValidationMsg += "Header => No errors detected" + "\r";
            else
                for (int i = 0; i < validationResults.Count; i++)
                    ValidationMsg += "Header => " + validationResults.ElementAt(i) + "\r";

            // Set context for model validation - every Line
            for (int n = 0; n < invoice.Lines!.Count; n++)
            {
                context = new ValidationContext(invoice.Lines[n], serviceProvider: null, items: null);
                validationResults = new List<ValidationResult>();
                isValid = Validator.TryValidateObject(invoice.Lines[n]!, context, validationResults, true);

                if (validationResults.Count == 0)
                    ValidationMsg += $"Line {n} => No errors detected" + "\r";
                else
                    for (int i = 0; i < validationResults.Count; i++)
                        ValidationMsg += $"Line {n} => " + validationResults.ElementAt(i) + "\r";
            }

            JsonText = System.Text.Json.JsonSerializer.Serialize<Invoice>(invoice);
            JsonTextFmt = Newtonsoft.Json.JsonConvert.SerializeObject(invoice, Newtonsoft.Json.Formatting.Indented);

            var rt = Newtonsoft.Json.Linq.JObject.Parse(JsonText);

            Invoice? invh = Newtonsoft.Json.JsonConvert.DeserializeObject<Invoice>(JsonText);
        }
        catch (Exception ex) { ValidationMsg = "Error : Testing Invoice Model=> " + ex.Message; }          
    }
}